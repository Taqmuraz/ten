(in-package #:ten)

(defun load-shader-to-gl (vert-str frag-str)
  (lets (
      vs (gl:create-shader :vertex-shader)
      fs (gl:create-shader :fragment-shader)
      p (gl:create-program)
    )
    (gl:shader-source vs vert-str)
    (gl:compile-shader vs)
    (gl:shader-source fs frag-str)
    (gl:compile-shader fs)
    (gl:attach-shader p vs)
    (gl:attach-shader p fs)
    (gl:link-program p)
    (make-assoc :program p)
  )
)

(defmacro def-uniform (kind load)
  `(defun ,(symbol-of 'load-uniform- kind) (program name value)
    (lets (loc (gl:get-uniform-location program name)) ,load)
  )
)

(def-uniform :float (gl:uniformf loc value))
(def-uniform :vec (gl:uniformfv loc value))
(def-uniform :mat (gl:uniform-matrix loc 4 (vector value)))
(def-uniform :mats (gl:uniform-matrix loc 4 (coerce value 'vector)))
